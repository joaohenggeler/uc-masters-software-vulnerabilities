#!/usr/bin/env python3

"""
	This script generates the security alerts for any files affected by vulnerabilities associated with the five C/C++ projects.
	
	This information includes the file's path, whether it was vulnerable or not, the associated Git commit where this specific
	file version originated from, and various different security alerts generated by SATs (at a file, function, and class level).

	This script uses the CSV files generated after running "create_file_timeline.py" to creates its own CSVs.
"""

import os

import pandas as pd # type: ignore

from modules.common import log, append_dataframe_to_csv, check_range_overlap, delete_file, replace_in_filename, serialize_json_container
from modules.sats import CppcheckSat
from modules.project import Project

####################################################################################################

project_list = Project.get_project_list_from_config()

Project.debug_ensure_all_project_repositories_were_loaded(project_list)

OUTPUT_SUBDIRECTORY = 'alerts'

for project in project_list:

	project.create_output_subdirectory(OUTPUT_SUBDIRECTORY)
	cppcheck = CppcheckSat(project)

	for input_csv_path in project.find_output_csv_files('file-timeline'):

		log.info(f'Generating the alerts with Cppcheck version {cppcheck.version} for the project "{project}" using the information in "{input_csv_path}".')

		for changed_files in project.iterate_and_checkout_file_timeline_in_repository(input_csv_path):

			affected_commit = 1 if changed_files.Affected else 0
			vulnerable_commit = 1 if changed_files.Vulnerable else 0

			# We should be careful when using the topological index here since it may be repeated for different affected values.
			output_path = os.path.join(OUTPUT_SUBDIRECTORY, f'alerts-t{changed_files.TopologicalIndex}-a{affected_commit}-v{vulnerable_commit}')
			output_csv_path = replace_in_filename(input_csv_path, 'file-timeline', output_path, remove_extra_extensions=True)

			cppcheck_success = cppcheck.generate_project_alerts(changed_files.AbsoluteFilePaths, output_csv_path)

			if cppcheck_success:
				
				alerts = pd.read_csv(output_csv_path, dtype=str)

				alerts.insert(0, 'Topological Index', None)
				alerts.insert(1, 'Affected Commit', None)
				alerts.insert(2, 'Vulnerable Commit', None)
				alerts.insert(3, 'Commit Hash', None)
				alerts.insert(4, 'CVEs', None)
				alerts.insert(5, 'Affected Functions', None)
				alerts.insert(6, 'Affected Classes', None)
				alerts.insert(7, 'Vulnerable File', None)

				alerts['Topological Index'] = changed_files.TopologicalIndex
				alerts['Affected Commit'] = 'Yes' if changed_files.Affected else 'No'
				alerts['Vulnerable Commit'] = 'Yes' if changed_files.Vulnerable else 'No'
				alerts['Commit Hash'] = changed_files.CommitHash
				alerts['CVEs'] = changed_files.Cves
				
				for row in alerts.itertuples():
					
					if pd.isna(row.File) or pd.isna(row.Line):
						log.warning('The following alert is missing its file or line number: ' + row)
						continue
					# Exclude any code units that are associated with a file that was not changed in this commit.
					elif row.File not in changed_files.RelativeFilePaths:
						continue

					function_list = changed_files.FilePathToFunctions[row.File]
					class_list = changed_files.FilePathToClasses[row.File]
					alert_lines = [int(row.Line), int(row.Line)]

					affected_function_list = []
					affected_class_list = []

					for unit in function_list:
						if check_range_overlap(unit['Lines'], alert_lines):
							affected_function_list.append(unit)

					for unit in class_list:
						if check_range_overlap(unit['Lines'], alert_lines):
							affected_class_list.append(unit)

					alerts.at[row.Index, 'Affected Functions'] = serialize_json_container(affected_function_list)
					alerts.at[row.Index, 'Affected Classes'] = serialize_json_container(affected_class_list)
					alerts.at[row.Index, 'Vulnerable File'] = row[3]

				log.info(f'Generated the alerts to "{output_csv_path}".')
				alerts.to_csv(output_csv_path, index=False)
			else:
				log.error(f'Failed to generate the alerts for the commit {changed_files.CommitHash} to "{output_csv_path}".')
				delete_file(output_csv_path)

	log.info(f'Finished running for the project "{project}".')

print('Finished running.')
