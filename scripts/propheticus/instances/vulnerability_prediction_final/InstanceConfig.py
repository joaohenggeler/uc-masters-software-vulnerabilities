#!/usr/bin/env python3

"""
	This script defines a class that overrides any default configurations used by Propheticus when processing the datasets generated by "build_propheticus_dataset_from_raw_dataset.py".
"""

import os
import re
import sys

import propheticus.Config

# @Hack: This is a hacky way to include our own modules, but it works for now.
sys.path.insert(0, os.path.normpath(os.path.join(os.path.abspath(__file__), '..', '..', '..', '..')))
from modules.common import log, GLOBAL_CONFIG
from modules.project import Project

log.info('Initializing the instance configuration.')

def get_prediction_class_descriptions() -> dict:
	""" Retrieves a dictionary that maps each numeric class label to its description (which is used when generating plots). """

	prediction_classes = ['Neutral', 'Vulnerable (No Category)'] + list(GLOBAL_CONFIG['vulnerability_categories'].keys()) + ['Vulnerable (With Category)']
	# Create an abbreviated name for each class.
	prediction_classes = [re.sub(r'[a-z ]', '', class_) for class_ in prediction_classes]
	return {index: value for index, value in enumerate(prediction_classes)}

class InstanceConfig(propheticus.Config):
	
	PROJECT_LIST = Project.get_project_list_from_config()
	CODE_UNIT_LIST = [code_unit for code_unit, allowed in GLOBAL_CONFIG['allowed_code_units'].items() if allowed]
	TARGET_LABEL_LIST = GLOBAL_CONFIG['target_labels']
	PROPHETICUS = GLOBAL_CONFIG['propheticus']

	# Override default configuration values.
	ClassesDescription = get_prediction_class_descriptions()