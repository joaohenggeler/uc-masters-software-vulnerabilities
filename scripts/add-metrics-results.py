#!/usr/bin/env python
import glob
import os
import sys

import mysql.connector
import numpy as np
import pandas as pd

import estagio

"""
	This script adds the contents of any files that were generated by Understand (using the script generate-metrics-results.py) to
	the software vulnerabilities database. These are currently added to a test table called 'files_0_mozilla'. Only software metrics
	related to files are currently handled.

	The MySQL server must be started before using this script.

	Requirements:

	pip install mysql-connector-python
	pip install numpy
	pip install pandas
"""

DEBUG_MODE = True
if DEBUG_MODE:
	print('Debug mode is enabled!')

database_config = estagio.load_database_config()

try:
	print('Connecting to the database...')
	connection = mysql.connector.connect(**database_config)
	cursor = connection.cursor(prepared=True)
except mysql.connector.Error as error:
	error_string = repr(error)
	print(f'Failed to connect to the database with the error: {error_string}')
	sys.exit(1)

# --------------------------------------------------

if DEBUG_MODE:

	try:
		print('Dropping all the test metrics tables...')
		cursor.execute(	'''
							DROP TABLE IF EXISTS files_0_mozilla;
						''')

		connection.commit()
	except mysql.connector.Error as error:
		error_string = repr(error)
		print(f'Failed to drop all the test metrics tables with the error: {error_string}')
		sys.exit(1)

# --------------------------------------------------

try:
	print('Creating the files table...')
	cursor.execute(	'''
						CREATE TABLE IF NOT EXISTS files_0_mozilla LIKE files;
					''')

	connection.commit()
except mysql.connector.Error as error:
	error_string = repr(error)
	print(f'Failed to create the files table with the error: {error_string}')
	sys.exit(1)

# --------------------------------------------------
print()

METRICS_RESULTS_FILE_PATH = os.path.join('metrics-results', r'*.csv')
metrics_results_file_list = glob.glob(METRICS_RESULTS_FILE_PATH)

for i, results_file_path in enumerate(metrics_results_file_list):

	print(f'Adding the results file {i+1} of {len(metrics_results_file_list)}: "{results_file_path}"...')
	
	results = pd.read_csv(results_file_path)

	if DEBUG_MODE:
		print('Unique values in the "Kind" column:')
		print(results['Kind'].unique())
		print()

	# Replace any N/A values with None.
	results = results.replace({np.nan: None})

	# For testing purposes: only insert some metrics.
	if DEBUG_MODE:
		results = results[::200]

	for index, row in results.iterrows():

		kind = row['Kind']
		name = row['Name']
		file_path = row['File']

		if file_path is not None:
			file_path = file_path.replace('\\', '/')

		if kind == 'File':

			if DEBUG_MODE:
				print(f'- Inserting the file result {index+1}: "{name}"...')

			try:
				cursor.execute(	'''
									INSERT INTO files_0_mozilla
									(
										ID_File, P_ID, FilePath,
										Patched, Occurrence, R_ID, Affected,
										AltAvgLineBlank, AltAvgLineCode, AltAvgLineComment,
										AltCountLineBlank, AltCountLineCode, AltCountLineComment,
										AvgCyclomatic, AvgCyclomaticModified, AvgCyclomaticStrict,
										AvgEssential, AvgLine, AvgLineBlank, AvgLineCode, AvgLineComment, 
										CountDeclClass, CountDeclFunction, CountLine, CountLineBlank,
										CountLineCode, CountLineCodeDecl, CountLineCodeExe, CountLineComment,
										CountLineInactive, CountLinePreprocessor, CountSemicolon, CountStmt,
										CountStmtDecl, CountStmtEmpty, CountStmtExe,
										MaxCyclomatic, MaxCyclomaticModified, MaxCyclomaticStrict,
										MaxEssential, MaxNesting, RatioCommentToCode,
										SumCyclomatic, SumCyclomaticModified, SumCyclomaticStrict, SumEssential
									)
									VALUES
									(
										NULL, NULL, %s,
										NULL, NULL, 0, NULL,
										%s, %s, %s,
										%s, %s, %s,
										%s, %s, %s,
										%s, %s, %s, %s, %s, 
										%s, %s, %s, %s,
										%s, %s, %s, %s,
										%s, %s, %s, %s,
										%s, %s, %s,
										%s, %s, %s,
										%s, %s, %s,
										%s, %s, %s, %s
									);
								''',
								(
									file_path,
									row['AltAvgLineBlank'], row['AltAvgLineCode'], row['AltAvgLineComment'],
									row['AltCountLineBlank'], row['AltCountLineCode'], row['AltCountLineComment'],
									row['AvgCyclomatic'], row['AvgCyclomaticModified'], row['AvgCyclomaticStrict'],
									row['AvgEssential'], row['AvgLine'], row['AvgLineBlank'], row['AvgLineCode'], row['AvgLineComment'], 
									row['CountDeclClass'], row['CountDeclFunction'], row['CountLine'], row['CountLineBlank'],
									row['CountLineCode'], row['CountLineCodeDecl'], row['CountLineCodeExe'], row['CountLineComment'],
									row['CountLineInactive'], row['CountLinePreprocessor'], row['CountSemicolon'], row['CountStmt'],
									row['CountStmtDecl'], row['CountStmtEmpty'], row['CountStmtExe'],
									row['MaxCyclomatic'], row['MaxCyclomaticModified'], row['MaxCyclomaticStrict'],
									row['MaxEssential'], row['MaxNesting'], row['RatioCommentToCode'],
									row['SumCyclomatic'], row['SumCyclomaticModified'], row['SumCyclomaticStrict'], row['SumEssential']
								)
								)

				connection.commit()
			except mysql.connector.Error as error:
				error_string = repr(error)
				print(f'-> Failed to insert the result "{name}" with the error: {error_string}')

		elif 'Function' in kind:
			# To be implemented.
			pass
		elif 'Class' in kind or 'Struct' in kind or 'Union' in kind:
			# To be implemented.
			pass
		else:
			print(f'-> Skipping the unhandled record type "{kind}".')

	print()
	print()

try:
	cursor.close()
	connection.close()
except mysql.connector.Error as error:
	error_string = repr(error)
	print(f'Failed to close the connection to the database with the error: {error_string}')

print('Finished running.')
