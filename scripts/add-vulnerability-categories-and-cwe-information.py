#!/usr/bin/env python
import sys
import mysql.connector
import requests
import bs4

"""
	This script creates/updates two tables in the software vulnerability database:
	
	- 'vulnerability_categories', which contains the names of various vulnerability categories.
	These were taken from the paper "On the Use of Open-Source C/C++ Static Analysis Tools in Large Projects" (page 3).
	
	- 'cwe_info', which maps a CWE value to its description/summary and one of the category in the previous table.
	These descriptions are scraped from the "cwe.mitre.org" website.

	Requirements:

	pip install mysql-connector-python
	pip install requests
	pip install beautifulsoup4
"""

database_config = {
	'host':			'127.0.0.1',
	'port':			'3306',

	'user':			'root',
	'password':		'',

	'charset':		'utf8',

	'database':		'software'
}

try:
	print('Connecting to the database...')
	connection = mysql.connector.connect(**database_config)
	cursor = connection.cursor()
except mysql.connector.Error as error:
	error_string = repr(error)
	print(f'Failed to connect to the database with the error: {error_string}')
	sys.exit(1)

vulnerability_categories = {
	'Memory Management': 			[119, 399, 362],
	'Input Validation': 			[20, 79, 189, 94],
	'Permission': 					[264, 255, 269, 284, 287, 352],
	'Data Protection': 				[199, 200],
	'Coding Practices': 			[17, 254, 19],
	'Cryptography': 				[310],
	'System Configuration': 		[16],
	'File Management': 				[22, 59],
	
	'Output Encoding': 				[],
	'Error Handling and Logging': 	[],
	'Communication Security': 		[],
	'Database Security': 			[]
}

# --------------------------------------------------

try:
	print('Creating the vulnerability categories table...')
	cursor.execute(	'''
						CREATE TABLE IF NOT EXISTS vulnerability_categories
						(
							ID_CATEGORY INTEGER AUTO_INCREMENT PRIMARY KEY,
							NAME VARCHAR(50) NOT NULL UNIQUE
						)
					''')

	connection.commit()
except mysql.connector.Error as error:
	error_string = repr(error)
	print(f'Failed to create the vulnerability categories table with the error: {error_string}')
	sys.exit(1)

# --------------------------------------------------

try:
	print('Creating the CWE information table...')
	cursor.execute(	'''
						CREATE TABLE IF NOT EXISTS cwe_info
						(
							V_CWE INTEGER PRIMARY KEY,
							DESCRIPTION VARCHAR(1000) NOT NULL,
							ID_CATEGORY INTEGER
						)
					''')

	connection.commit()
except mysql.connector.Error as error:
	error_string = repr(error)
	print(f'Failed to create the CWE information table with the error: {error_string}')
	sys.exit(1)

# --------------------------------------------------

try:
	print('Inserting the categories in the vulnerability categories table...')
	name_list = [(name,) for name in vulnerability_categories]
	
	cursor.executemany(	'''
							INSERT IGNORE INTO vulnerability_categories (NAME)
							VALUES (%s);
						''',
						name_list)

	connection.commit()
except mysql.connector.Error as error:
	error_string = repr(error)
	print(f'Failed to insert the categories with the error: {error_string}')

# --------------------------------------------------

HTTP_HEADERS = {
	'Accept-Language': 'en-US',
	'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36'
}

cwe_list_in_db = []
try:	
	cursor.execute(	'''
						SELECT V_CWE FROM cwe_info ORDER BY V_CWE;
					''')

	cwe_list_in_db = [result_set[0] for result_set in cursor]

except mysql.connector.Error as error:
	error_string = repr(error)
	print(f'Failed to insert the categories with the error: {error_string}')

print('-> CWEs already in the database:')
print(cwe_list_in_db)

total_descriptions = 0
print('Inserting the CWE descriptions in the CWE information table...')
for category_name, cwe_list in vulnerability_categories.items():

	for cwe in cwe_list:

		if cwe not in cwe_list_in_db:

			try:
				url = f'https://cwe.mitre.org/data/definitions/{cwe}.html'
				response = requests.get(url, headers=HTTP_HEADERS)
				response.raise_for_status()
			except Exception as error:
				error_string = repr(error)
				print(f'Failed to download the page for CWE {cwe} with the error: {error_string}')
				continue

			soup = bs4.BeautifulSoup(response.text, 'html.parser')

			"""
				<div id="Description">
					<div class="heading">
						<span id="script">
							<a href="javascript:toggleblocksOC('269_Description');">
								<img id="ocimg_269_Description" src="/images/head_more.gif" border="0" alt="+">
							</a>
						</span>
						Description
					</div>

					<div name="oc_269_Description" id="oc_269_Description" class="expandblock">
						<div class="detail">
							<div class="indent">
								The software does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.
							</div>
						</div>
					</div>
				</div>

				[OR]

				<div id="Summary">
					<div class="heading">
						<span id="script">
							<a href="javascript:toggleblocksOC('310_Summary');">
								<img id="ocimg_310_Summary" src="/images/head_more.gif" border="0" alt="+">
							</a>
						</span>
						Summary
					</div>

					<div name="oc_310_Summary" id="oc_310_Summary" class="expandblock">
						<div class="detail">
							<div class="indent">
								Weaknesses in this category are related to the design and implementation of data confidentiality and integrity. Frequently these deal with the use of encoding techniques, encryption libraries, and hashing algorithms. The weaknesses in this category could lead to a degradation of the quality data if they are not addressed.
							</div>
						</div>
					</div>
				</div>
			"""

			description_div = soup.find('div', id='Description')
			if description_div is None:
				description_div = soup.find('div', id='Summary')

			if description_div is not None:
				
				indent_div = description_div.find('div', class_='indent')
				if indent_div is not None:
					
					try:
						description = indent_div.get_text(strip=True)
						
						cursor.execute(	'''
											INSERT INTO cwe_info (V_CWE, DESCRIPTION, ID_CATEGORY)
											VALUES
											(
												%s,
												%s,
												(SELECT ID_CATEGORY FROM vulnerability_categories WHERE NAME = %s LIMIT 1)
											);
										''',
										(cwe, description, category_name))

						connection.commit()
						total_descriptions += 1
					except mysql.connector.Error as error:
						error_string = repr(error)
						print(f'Failed to insert the CWE description with the error: {error_string}')

			else:
				print(f'No description or summary found for the CWE {cwe}.')

print(f'Inserted a total of {total_descriptions} CWE descriptions in the CWE information table.')

# --------------------------------------------------

try:
	print('Finding any CWE values in the vulnerabilities table that are not in the CWE information table...')
	cursor.execute(	'''
						SELECT DISTINCT v.V_CWE
						FROM vulnerabilities v
						LEFT JOIN cwe_info c ON c.V_CWE = v.V_CWE
						WHERE c.V_CWE IS NULL AND v.V_CWE <> -1
						ORDER BY v.V_CWE;
					''')

	cwe_list_not_in_info_table = [result_set[0] for result_set in cursor]
	print('-> CWEs not in the information table:')
	print(cwe_list_not_in_info_table)

except mysql.connector.Error as error:
	error_string = repr(error)
	print(f'Failed to query any missing CWE values with the error: {error_string}')

# --------------------------------------------------

try:
	cursor.close()
	connection.close()
except mysql.connector.Error as error:
	error_string = repr(error)
	print(f'Failed to close the connection to the database with the error: {error_string}')

print('Finished running.')
