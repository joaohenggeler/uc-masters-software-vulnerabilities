#!/usr/bin/env python
import estagio
import sys
import os
import mysql.connector
import glob
import numpy as np
import pandas as pd

"""
	This script adds the contents of any files that were generated by SATs (Cppcheck, Flawfinder, etc) to four different tables in
	the database: 'sat', 'rule', 'rule_cwe_info', 'alert'. The 'cwe_info' table currently does not need to be created before running
	this script. Only CSV files in the 'sat-results' directory that follow the naming structure "sat_name-n-commit_hash.csv" are
	loaded.

	Requirements:

	pip install mysql-connector-python
	pip install numpy
	pip install pandas
"""

database_config = estagio.load_database_config()

try:
	print('Connecting to the database...')
	connection = mysql.connector.connect(**database_config)
	cursor = connection.cursor(prepared=True)
except mysql.connector.Error as error:
	error_string = repr(error)
	print(f'Failed to connect to the database with the error: {error_string}')
	sys.exit(1)

# --------------------------------------------------

DROP_SAT_TABLES_BEFORE_RUNNING = True

if DROP_SAT_TABLES_BEFORE_RUNNING:

	try:
		print('Dropping all SAT related tables...')
		cursor.execute(	'''
							DROP TABLE IF EXISTS sat, rule, rule_cwe_info, alert;
						''')

		connection.commit()
	except mysql.connector.Error as error:
		error_string = repr(error)
		print(f'Failed to drop all SAT related tables with the error: {error_string}')
		sys.exit(1)

# --------------------------------------------------

try:
	print('Creating the SAT table...')
	cursor.execute(	'''
						CREATE TABLE IF NOT EXISTS sat
						(
							SAT_ID INTEGER AUTO_INCREMENT PRIMARY KEY,
							SAT_NAME VARCHAR(50) NOT NULL UNIQUE
						);
					''')

	connection.commit()
except mysql.connector.Error as error:
	error_string = repr(error)
	print(f'Failed to create the SAT table with the error: {error_string}')
	sys.exit(1)

# --------------------------------------------------

try:
	print('Creating the Rules table...')
	cursor.execute(	'''
						CREATE TABLE IF NOT EXISTS rule
						(
							RULE_ID INTEGER AUTO_INCREMENT PRIMARY KEY,
							RULE_NAME VARCHAR(100) NOT NULL UNIQUE,
							RULE_CATEGORY VARCHAR(50) NOT NULL,

							SAT_ID INTEGER NOT NULL,
							
							FOREIGN KEY (SAT_ID) REFERENCES sat(SAT_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
						);
					''')

	connection.commit()
except mysql.connector.Error as error:
	error_string = repr(error)
	print(f'Failed to create the Rules table with the error: {error_string}')
	sys.exit(1)

# --------------------------------------------------

try:
	print('Creating the Rules to CWE Info table...')
	cursor.execute(	'''
						CREATE TABLE IF NOT EXISTS rule_cwe_info
						(
							RULE_ID INTEGER,
							V_CWE INTEGER,
							
							PRIMARY KEY (RULE_ID, V_CWE),

							FOREIGN KEY (RULE_ID) REFERENCES rule(RULE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
						);
					''')

	# For now, we'll remove this foreign key relationship since we would otherwise be unable to add CWE values
	# that don't already exist in the 'cwe_info' table.
	# FOREIGN KEY (V_CWE) REFERENCES cwe_info(V_CWE) ON DELETE RESTRICT ON UPDATE RESTRICT

	connection.commit()
except mysql.connector.Error as error:
	error_string = repr(error)
	print(f'Failed to create the Rules to CWE Info table with the error: {error_string}')
	sys.exit(1)

# --------------------------------------------------

try:
	print('Creating the Alerts table...')
	cursor.execute(	'''
						CREATE TABLE IF NOT EXISTS alert
						(
							ALERT_ID INTEGER AUTO_INCREMENT PRIMARY KEY,
							ALERT_SEVERITY_LEVEL INTEGER,
							ALERT_LINE INTEGER NOT NULL,
							ALERT_MESSAGE VARCHAR(1000),

							RULE_ID INTEGER NOT NULL,
							ID_File INTEGER NOT NULL,
							
							FOREIGN KEY (RULE_ID) REFERENCES rule(RULE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
						);
					''')

	connection.commit()
except mysql.connector.Error as error:
	error_string = repr(error)
	print(f'Failed to create the Alerts table with the error: {error_string}')
	sys.exit(1)

# --------------------------------------------------

def insert_rule_and_alert_into_database(cursor, index,
										sat_name, rule_name, rule_category, rule_cwe_list,
										alert_severity_level, alert_line, alert_message,
										alert_file_path, alert_file_occurrence, alert_file_commit):
	
	try:
		print(f'- Inserting the rule "{rule_name}"...')

		cursor.execute(	'''
							INSERT IGNORE INTO rule (RULE_NAME, RULE_CATEGORY, SAT_ID)
							VALUES
							(
								%s,
								%s,
								(SELECT SAT_ID FROM sat WHERE SAT_NAME = %s LIMIT 1)
							);
						''',
						(rule_name, rule_category, sat_name))

		connection.commit()
	except mysql.connector.Error as error:
		error_string = repr(error)
		print(f'Failed to insert the rule "{rule_name}" with the error: {error_string}')

	try:
		rule_cwe_list = [(rule_name, cwe) for cwe in cwe_list]

		if len(cwe_list) > 0:
			print(f'- Inserting the CWEs...')
			print(cwe_list)

			cursor.executemany(	'''
									INSERT IGNORE INTO rule_cwe_info (RULE_ID, V_CWE)
									VALUES
									(
										(SELECT RULE_ID FROM rule WHERE RULE_NAME = %s LIMIT 1),
										%s
									);
								''',
								rule_cwe_list)

			connection.commit()

	except mysql.connector.Error as error:
		error_string = repr(error)
		print(f'Failed to insert the rule "{rule_name}" with the error: {error_string}')

	try:
		print(f'- Inserting the alert {index} from line {alert_line} in the file "{alert_file_path}"...')

		cursor.execute(	'''
							INSERT INTO alert (ALERT_SEVERITY_LEVEL, ALERT_LINE, ALERT_MESSAGE, RULE_ID, ID_File)
							VALUES
							(
								%s,
								%s,
								%s,
								(SELECT RULE_ID FROM rule WHERE RULE_NAME = %s LIMIT 1),
								(
									SELECT f.ID_File FROM
									(
										SELECT ID_File FROM files_1_dom WHERE FilePath = %s AND Occurrence = %s
										UNION ALL
										SELECT ID_File FROM files_1_javascript WHERE FilePath = %s AND Occurrence = %s
										UNION ALL
										SELECT ID_File FROM files_1_javascript_extras WHERE FilePath = %s AND Occurrence = %s
										UNION ALL
										SELECT ID_File FROM files_1_javascript_xpconnect WHERE FilePath = %s AND Occurrence = %s
										UNION ALL
										SELECT ID_File FROM files_1_layout_rendering WHERE FilePath = %s AND Occurrence = %s
										UNION ALL
										SELECT ID_File FROM files_1_libraries WHERE FilePath = %s AND Occurrence = %s
										UNION ALL
										SELECT ID_File FROM files_1_mozilla WHERE FilePath = %s AND Occurrence = %s
										UNION ALL
										SELECT ID_File FROM files_1_network WHERE FilePath = %s AND Occurrence = %s
										UNION ALL
										SELECT ID_File FROM files_1_toolkit WHERE FilePath = %s AND Occurrence = %s
										UNION ALL
										SELECT ID_File FROM files_1_webpage_structure WHERE FilePath = %s AND Occurrence = %s
										UNION ALL
										SELECT ID_File FROM files_1_widget WHERE FilePath = %s AND Occurrence = %s
									) f
									INNER JOIN extra_time_files AS e ON f.ID_File = e.ID_File
									WHERE e.P_ID = (SELECT P_ID FROM patches WHERE P_COMMIT = %s LIMIT 1)
									LIMIT 1
								)
							);
						''',
						(alert_severity_level, alert_line, alert_message, rule_name,
						alert_file_path, alert_file_occurrence,
						alert_file_path, alert_file_occurrence,
						alert_file_path, alert_file_occurrence,
						alert_file_path, alert_file_occurrence,
						alert_file_path, alert_file_occurrence,
						alert_file_path, alert_file_occurrence,
						alert_file_path, alert_file_occurrence,
						alert_file_path, alert_file_occurrence,
						alert_file_path, alert_file_occurrence,
						alert_file_path, alert_file_occurrence,
						alert_file_path, alert_file_occurrence,
						alert_file_commit))

		connection.commit()
	except mysql.connector.Error as error:
		error_string = repr(error)
		print(f'Failed to insert the alert {index} with the error: {error_string}')

	print()

# --------------------------------------------------

print()
print(f'---> Adding SAT results to the database:')
print()

SAT_RESULTS_DIRCTORY = 'sat-results'
sat_results = glob.iglob(fr'{SAT_RESULTS_DIRCTORY}\*-*-*.csv')

for results_path in sat_results:
	
	# E.g. "cppcheck-1-f40f923a0a09ab1d0e28a308364a924893c5fd02.csv"
	filename = os.path.basename(results_path).rsplit('.', 1)[0]
	filename_parts = filename.split('-', 3)
	
	# Parse key properties from the filename.
	sat_name = filename_parts[0].capitalize()
	# The second value is not relevant.
	file_commit = filename_parts[2]
	
	file_occurrence = 'after'
	if len(filename_parts) > 3:
		file_occurrence = 'before'

	# Automatically add any new SATs.
	try:
		print(f'Inserting the SAT "{sat_name}"...')
		cursor.execute(	'''
							INSERT IGNORE INTO sat (SAT_NAME)
							VALUES (%s);
						''',
						(sat_name,))

		connection.commit()
	except mysql.connector.Error as error:
		error_string = repr(error)
		print(f'Failed to insert the SAT {sat_name} with the error: {error_string}')
		continue

	# Process each type of SAT output.
	if sat_name == 'Cppcheck':

		results = pd.read_csv(results_path, header=0, usecols=range(4), names=['filename-loc', 'severity', 'id', 'message'])

		# Replace any N/A values with None.
		results = results.replace({np.nan: None})

		# For testing purposes: only insert every 3000th alert.
		results = results[::3000]

		print(f'Adding the {len(results)} {sat_name} results from "{results_path}" ({file_occurrence})...')
		print()

		for index, row in results.iterrows():

			filename_loc = row['filename-loc']
			category = row['severity']
			rule_name = row['id']
			message = row['message']
			cwe = None

			# E.g. "/opt/gecko-dev/accessible/src/atk/nsAccessibleText.h:123"
			# For the file path we just want the subdirectory in "gecko-dev".
			file_path, line = filename_loc.split(':', 1)
			file_path = file_path.split('gecko-dev/', 1)[1]

			# There are currently no CWEs in the Cppcheck CSV files (although they exist in the Excel spreadsheets).
			cwe_list = [cwe] if cwe is not None else []
			
			severity_level = None

			insert_rule_and_alert_into_database(cursor, index,
												sat_name, rule_name, category, cwe_list,
												severity_level, line, message,
												file_path, file_occurrence, file_commit)

	elif sat_name == 'Flawfinder':

		results = pd.read_csv(results_path)

		# Remove results that don't have a rule.
		results = results.dropna(subset=['Name'])

		# Replace any N/A values with None.
		results = results.replace({np.nan: None})

		# For testing purposes: only insert every 1000th alert.
		results = results[::1000]

		print(f'Adding the {len(results)} {sat_name} results from "{results_path}"...')
		print()

		for index, row in results.iterrows():

			file_path = row['File']
			line = row['Line']
			column = row['Column']
			severity_level = row['Level']
			category = row['Category']
			rule_name = row['Name']
			warning = row['Warning']
			suggestion = row['Suggestion']
			note = row['Note']
			cwe_list = row['CWEs']
			context = row['Context']
			context_hash = row['Fingerprint']
			
			# E.g. "/opt/josep/gecko-dev/cck/muc/dialshr.cpp"
			# For the file path we just want the subdirectory in "gecko-dev".
			file_path = file_path.split('gecko-dev/', 1)[1]

			# Get a list of CWEs. The following values may appear:
			# - 'CWE-676, CWE-120, CWE-20'
			# - 'CWE-362/CWE-367!'
			# - 'CWE-119!/CWE-120'
			if '/' in cwe_list:
				cwe_list = [cwe.split('-', 1)[1].rsplit('!', 1)[0] for cwe in cwe_list.split('/')]
			else:
				cwe_list = [cwe.split('-', 1)[1] for cwe in cwe_list.split(',')]

			insert_rule_and_alert_into_database(cursor, index,
												sat_name, rule_name, category, cwe_list,
												severity_level, line, warning,
												file_path, file_occurrence, file_commit)

	else:
		print(f'Skipping the results from the unknown SAT {sat_name}: "{results_path}" ({file_occurrence}).')

	print()
	print()

print('Finished running.')
