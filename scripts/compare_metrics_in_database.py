#!/usr/bin/env python3

"""
	This script compares the file-level metrics generated by Understand version 6 with the ones previously inserted in the database.
"""

from collections import Counter

import pandas as pd # type: ignore

from modules.common import log
from modules.database import Database
from modules.project import Project

####################################################################################################

project_list = Project.get_project_list_from_config()
id_to_project = {project.database_id: project for project in project_list}

total_metrics = 0
total_different = 0
num_files = 0

metric_counter: Counter = Counter()

with Database() as db:

	for project in project_list:
		
		for input_csv_path in project.find_output_csv_files('file-metrics'):

			log.info(f'Comparing the metrics in the CSV files and database for the project "{project}" using the information in "{input_csv_path}".')

			metrics = pd.read_csv(input_csv_path, dtype=str)
			num_files += len(metrics.index)

			for csv_index, csv_row in metrics.iterrows():

				table = project.database_name
				file_path = csv_row['File']
				occurrence = 'before' if csv_row['Vulnerable Commit'] == 'Yes' else 'after'
				commit = csv_row['Commit Hash']

				success, error_code = db.execute_query(f'''
														SELECT 	F.DIT AS MaxInheritanceTree, F.NOC AS CountClassDerived,
																F.CBC AS CountClassBase, F.RFC AS CountDeclMethodAll,
																F.CBO AS CountClassCoupled, F.LCOM AS PercentLackOfCohesion,
																F.HK AS HenryKafura, F.*
														FROM
														(
															SELECT * FROM FILES_AFFECTED_{table} WHERE FilePath = %(file_path)s AND Occurrence = %(occurrence)s
															UNION ALL
															SELECT * FROM FILES_NEUTRAL_{table} WHERE FilePath = %(file_path)s AND Occurrence = %(occurrence)s
														) F
														INNER JOIN EXTRA_TIME_FILES AS E ON F.ID_File = E.ID_File
														WHERE E.P_ID = (SELECT P_ID FROM PATCHES WHERE P_COMMIT = %(commit)s LIMIT 1);
														''',
														params={'file_path': file_path, 'occurrence': occurrence, 'commit': commit})
				
				###
				if success:

					for db_row in db.cursor:
						
						for db_column, db_metric in db_row.items():
							
							csv_metric = csv_row.get(db_column)
							
							if csv_metric is not None:
								
								total_metrics += 1
								csv_metric = int(csv_metric)
								
								if db_metric != csv_metric:
									
									total_different += 1
									metric_counter[db_column] += 1
									
									log.info(f'The {db_column} metric for the file "{file_path}" ({commit} - {occurrence}) in the {project} project has a different value in the CSV ({csv_metric}) than in the database ({db_metric}).')
									

				else:
					log.error(f'Failed to query the metrics for the file "{file_path}" ({commit} - {occurrence}) in the {project} project with the error code {error_code}.')
				####

result = f'Finished running. Found {total_different} different metric values out of {total_metrics} after processing {num_files} files. The following metrics were different: {metric_counter}'
log.info(result)
print(result)
