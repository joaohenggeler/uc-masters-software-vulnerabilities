#!/usr/bin/env python
import sys
import requests
import json
import bs4
from urllib.parse import urlparse

"""
	This script explores the information available in the CVE Details website by using its JSON API and by scraping some of its CVE pages.
	No connections to the software vulnerabilities database are made.

	CVE Details JSON API Reference: https://github.com/Amet13/vulncontrol

	Requirements:

	pip install requests
	pip install beautifulsoup4

"""

HTTP_HEADERS = {
	'Accept-Language': 'en-US',
	'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36'
}

try:
	json_api_url = f'https://www.cvedetails.com/json-feed.php'
	json_api_params = {'vendor_id': 33, 'product_id': 47, 'orderby': 1, 'numrows': 1}
	# Vendor ID = Linux, Product ID = Linux Kernel, Order By = Publish Date

	print('Downloading the latest Linux Kernel CVE from CVE Details JSON API...')
	response = requests.get(json_api_url, params=json_api_params, headers=HTTP_HEADERS)
	print(f'Used the URL "{response.url}".')
	response.raise_for_status()
except Exception as error:
	error_string = repr(error)
	print(f'Failed to download the CVE Details JSON API response with the error: {error_string}')
	sys.exit(1)

cve_list = json.loads(response.text)
print(json.dumps(cve_list, indent=4, sort_keys=True))

if len(cve_list) > 0:
	cve_info = cve_list[0]
	cve = cve_info['cve_id']
else:
	print('Received an empty array from the JSON API.')
	sys.exit(1)

print(f'Received {cve} from the JSON API.')
print()

try:
	page_url = f'https://www.cvedetails.com/cve/{cve}'
	print(f'Downloading the CVE Details page from "{page_url}"...')
	response = requests.get(page_url, headers=HTTP_HEADERS)
	response.raise_for_status()
except Exception as error:
	error_string = repr(error)
	print(f'Failed to download the CVE Details page for {cve} with the error: {error_string}')
	sys.exit(1)

soup = bs4.BeautifulSoup(response.text, 'html.parser')

"""
<table id="cvssscorestable" class="details">
	<tbody>
		<tr>
			<th>CVSS Score</th>
			<td><div class="cvssbox" style="background-color:#ffbc10">6.8</div></td>
		</tr>
		<tr>
			<th>Confidentiality Impact</th>
			<td><span style="color:orange">Partial</span>
			<span class="cvssdesc">(There is considerable informational disclosure.)</span></td>
		</tr>
		<tr>
			<th>CWE ID</th>
			<td><a href="//www.cvedetails.com/cwe-details/94/cwe.html" title="CWE-94 - CWE definition">94</a></td>
		</tr>
	</tbody>
</table>
"""

print('---> CVSS Scores & Vulnerability Types:')
print()

scores_table = soup.find('table', id='cvssscorestable')
if scores_table is not None:

	score_list = scores_table.find_all('tr')
	for score in score_list:

		name_th = score.find('th')
		if name_th is not None:
			name = name_th.get_text(strip=True)

		description_td = score.find('td')
		if description_td is not None:
			description = description_td.get_text(strip=True)

		print(f'\t"{name}" : "{description}"')
		print()

else:
	print(f'No scores table found for {cve}.')

"""
<table class="listtable" id="vulnversconuttable">
	<tbody>
		<tr>
			<th>Vendor</th>
			<th>Product</th>
			<th>Vulnerable Versions</th>
		</tr>
		<tr>
			<td><a href="//www.cvedetails.com/vendor/33/Linux.html" title="Details for Linux">Linux</a></td>
			<td><a href="//www.cvedetails.com/product/47/Linux-Linux-Kernel.html?vendor_id=33" title="Product Details Linux Linux Kernel">Linux Kernel</a></td>
			<td class="num">1</td>
		</tr>
	</tbody>
</table>
"""

"""
<table class="listtable" id="vulnrefstable">
	<tbody>
		<tr>
			<td class="r_average">
				<a href="https://github.com/torvalds/linux/commit/09ccfd238e5a0e670d8178cf50180ea81ae09ae1" target="_blank" title="External url">https://github.com/torvalds/linux/commit/09ccfd238e5a0e670d8178cf50180ea81ae09ae1</a>
				CONFIRM
				<br>
			</td>
		</tr>
		<tr>
			<td class="r_average">
				<a href="https://bugzilla.redhat.com/show_bug.cgi?id=1292045" target="_blank" title="External url">https://bugzilla.redhat.com/show_bug.cgi?id=1292045</a>
				CONFIRM
				<br>
			</td>
		</tr>
	</tbody>
</table>
"""

print(f'---> References For {cve}:')
print()

references_table = soup.find('table', id='vulnrefstable')
if references_table is not None:

	reference_list = references_table.find_all('tr')
	for reference in reference_list:

		url_a = reference.find('a', title='External url')
		if url_a is not None:

			url = url_a.get_text(strip=True)
			url_parts = urlparse(url)

			if url_parts.hostname == 'github.com':

				commit_hash = url.rsplit('/', 1)[-1]

				print(f'\tGitHub Commit Hash : "{commit_hash}"')
				print()

else:
	print(f'No references table found for {cve}.')

print('Finished running.')
