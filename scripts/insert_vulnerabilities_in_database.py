#!/usr/bin/env python3

"""
	This script inserts the data from any CSV files generated by "collect_vulnerabilities.py" into the VULNERABILITIES table in the database.
	Before running this script, the table must be first modified by running "alter_vulnerabilities_in_database.py".
"""

from typing import cast

import numpy as np # type: ignore
import pandas as pd # type: ignore

from modules.common import log, deserialize_json_container
from modules.database import Database
from modules.project import Project

####################################################################################################

with Database(buffered=True) as db:

	project_list = Project.get_project_list_from_config()
	for project in project_list:
		
		for input_csv_path in project.find_output_csv_files('cve'):

			log.info(f'Inserting the vulnerabilities for the project "{project}" using the information in "{input_csv_path}".')

			vulnerabilities = pd.read_csv(input_csv_path, dtype=str)
			vulnerabilities = vulnerabilities.replace({np.nan: None})

			for _, row in vulnerabilities.iterrows():

				cve = row['CVE']

				success, error_code = db.execute_query('SELECT * FROM VULNERABILITIES WHERE CVE = %(CVE)s LIMIT 1;', params={'CVE': cve})

				assert db.cursor.rowcount != -1, 'The database cursor must be buffered.'

				if db.cursor.rowcount > 0:
					log.info(f'Skipping the CVE {cve} for the project "{project}" since it already exists.')
					continue

				vulnerability_types = deserialize_json_container(row['Vulnerability Types'], [])
				classification = ''.join(['>' + type + '<' for type in vulnerability_types]) if vulnerability_types else 'Undefined'

				cvss = row['CVSS Score']
				cvss_rating = None

				try:
					cvss = float(cvss)

					if 9.0 <= cvss <= 10.0:
						cvss_rating = 'Critical'
					elif 7.0 <= cvss <= 8.9:
						cvss_rating = 'High'
					elif 4.0 <= cvss <= 6.9:
						cvss_rating = 'Medium'
					elif 0.1 <= cvss <= 3.9:
						cvss_rating = 'Low'
					elif cvss == 0.0:
						cvss_rating = 'None'
					else:
						log.warning(f'Could not map the CVSS "{cvss}" to a valid CVSS v3.0 rating.')

				except ValueError:
					log.warning(f'Could not convert the CVSS "{cvss}" to a float.')

				del cvss

				cwe = row['CWE']
				advisory_id_list = cast(list, deserialize_json_container(row['Advisory IDs'], [None]))
				bugzilla_url_list = cast(list, deserialize_json_container(row['Bugzilla URLs'], [None]))

				for advisory_id in advisory_id_list:

					# Format advisory IDs depending on the project:
					# - Mozilla: IDs like "MFSA-2013-49" should be formatted as "mfsa2013-49".
					# - Xen: IDs like "XSA-99" are already formatted correctly.
					if advisory_id is not None and project.short_name == 'mozilla':
						mfsa, remainder = advisory_id.split('-', 1)
						advisory_id = mfsa.lower() + remainder

					for bugzilla_url in bugzilla_url_list:
					
						success, error_code = db.execute_query(	'''
																INSERT INTO VULNERABILITIES
																(
																	R_ID, CVE,
																	V_CWE, ID_ADVISORIES, V_CLASSIFICATION,
																	V_IMPACT, VULNERABILITY_URL
																)
																VALUES
																(
																	%(R_ID)s, %(CVE)s,
																	%(V_CWE)s, %(ID_ADVISORIES)s, %(V_CLASSIFICATION)s,
																	%(V_IMPACT)s, %(VULNERABILITY_URL)s
																);
																''',
																
																params={
																	'R_ID': project.database_id,
																	'CVE': cve,
																	'V_CWE': cwe,
																	'ID_ADVISORIES': advisory_id,
																	'V_CLASSIFICATION': classification,
																	'V_IMPACT': cvss_rating,
																	'VULNERABILITY_URL': bugzilla_url,
																}
															)

						if success:
							log.info(f'Inserted the {cve} (ID {db.cursor.lastrowid}) for the project "{project}" ({advisory_id}, {bugzilla_url}).')
						else:
							log.error(f'Failed to insert the {cve} for the project "{project}" ({advisory_id}, {bugzilla_url}) with the error code {error_code}.')

	##################################################

	log.info('Committing changes.')
	db.commit()

log.info('Finished running.')
print('Finished running.')
